import os
import re
import sqlite3
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from telebot.types import Message
from docx import Document
import openpyxl
import phonenumbers
from phonenumbers import geocoder, carrier
import time
import csv
import sys
from pathlib import Path
from tqdm import tqdm
import io
import threading
from memepay import AsyncMemePay, MemePay
from memepay.webhook import WebhookPayload
import asyncio
from telebot import util
from telebot.apihelper import ApiTelegramException
import hmac
import hashlib
import requests
from urllib.parse import urlencode
import uuid
import schedule 


TOKEN = '8348293204:AAHZ49kQeXwARjEfMOuIv5-lFpjeNhshNqg'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot(TOKEN)

BASE_DIR = 'Base'

ADMINS = [7209314948, 1811753312, 8441679190]

MEMEPAY_API_KEY = "mp_9992c136f908ac7d2467c3b197d83cfc"  # –ü–æ–ª—É—á–∏—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ MemePay
MEMEPAY_SHOP_ID = "cb457a74-17ca-4365-91f6-51f0886679c4"   # ID –º–∞–≥–∞–∑–∏–Ω–∞ –≤ MemePay

LOG_GROUP_ID = -1002991202021  # ID –≥—Ä—É–ø–ø—ã –¥–ª—è –ª–æ–≥–æ–≤





# --- –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ ---
def extract_data_from_csv_file(file_path):
    names, dob, phones, emails, addresses, tg_ids, tg_usernames = [], [], [], [], [], [], []
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            reader = csv.reader(f, delimiter=';')
            first_line = next(reader)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Telegram –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
            if 'id' in first_line and 'username' in first_line:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram —Ñ–æ—Ä–º–∞—Ç–∞ (id,phone,username,first_name,last_name)
                headers = [h.strip().lower() for h in first_line]
                header_map = {h: i for i, h in enumerate(headers)}

                idx_id = header_map.get('id', None)
                idx_phone = header_map.get('phone', None)
                idx_username = header_map.get('username', None)
                idx_first_name = header_map.get('first_name', None)
                idx_last_name = header_map.get('last_name', None)

                for row in reader:
                    if len(row) < len(headers):
                        continue
                    
                    # Telegram –¥–∞–Ω–Ω—ã–µ
                    if idx_id is not None and idx_id < len(row):
                        tg_ids.append(row[idx_id].strip())
                    if idx_username is not None and idx_username < len(row):
                        tg_usernames.append(row[idx_username].strip())
                    
                    # –¢–µ–ª–µ—Ñ–æ–Ω –∏ –∏–º—è
                    if idx_phone is not None and idx_phone < len(row):
                        phones.append(row[idx_phone].strip())
                    if idx_first_name is not None and idx_first_name < len(row):
                        first_name = row[idx_first_name].strip()
                        last_name = row[idx_last_name].strip() if idx_last_name is not None and idx_last_name < len(row) else ''
                        names.append(f"{first_name} {last_name}".strip())

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
            elif any(h.lower() in ['—Ñ–∞–º–∏–ª–∏—è', '–∏–º—è', '–æ—Ç—á–µ—Å—Ç–≤–æ', '–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è', '—Ç–µ–ª–µ—Ñ–æ–Ω'] for h in first_line):
                headers = first_line
                header_map = {h.strip(): i for i, h in enumerate(headers)}

                idx_lastname = header_map.get('–§–∞–º–∏–ª–∏—è', None)
                idx_firstname = header_map.get('–ò–º—è', None)
                idx_middlename = header_map.get('–û—Ç—á–µ—Å—Ç–≤–æ', None)
                idx_dob = header_map.get('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è', None)
                idx_phone = header_map.get('–¢–µ–ª–µ—Ñ–æ–Ω', None)
                idx_email = header_map.get('–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞', None)
                idx_address = header_map.get('–ê–¥—Ä–µ—Å', None)

                for row in reader:
                    if len(row) < len(headers):
                        continue
                    lastname = row[idx_lastname].strip() if idx_lastname is not None and idx_lastname < len(row) else ''
                    firstname = row[idx_firstname].strip() if idx_firstname is not None and idx_firstname < len(row) else ''
                    middlename = row[idx_middlename].strip() if idx_middlename is not None and idx_middlename < len(row) else ''
                    full_name = ' '.join([lastname, firstname, middlename]).strip()
                    names.append(full_name if full_name else '')
                    dob.append(row[idx_dob].strip() if idx_dob is not None and idx_dob < len(row) else '')
                    phones.append(row[idx_phone].strip() if idx_phone is not None and idx_phone < len(row) else '')
                    emails.append(row[idx_email].strip() if idx_email is not None and idx_email < len(row) else '')
                    addresses.append(row[idx_address].strip() if idx_address is not None and idx_address < len(row) else '')

            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                def process_row(row):
                    phone = row[0].strip() if len(row) > 0 else ''
                    name = row[1].strip() if len(row) > 1 else ''
                    birth = row[2].strip() if len(row) > 2 else ''
                    address = ', '.join(x.strip() for x in row[4:] if x.strip()) if len(row) > 4 else ''
                    return name, birth, phone, '', address

                name, birth, phone, email, address = process_row(first_line)
                names.append(name)
                dob.append(birth)
                phones.append(phone)
                emails.append(email)
                addresses.append(address)

                for row in reader:
                    name, birth, phone, email, address = process_row(row)
                    names.append(name)
                    dob.append(birth)
                    phones.append(phone)
                    emails.append(email)
                    addresses.append(address)

        return names, dob, phones, emails, addresses, tg_ids, tg_usernames

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSV: {e}")
        return [], [], [], [], [], [], []


def is_admin(user_id):
    ADMINS = [7209314948, 1811753312, 8441679190]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
    return user_id in ADMINS


def extract_data_from_text(text):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ CSV —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    if '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è' in text and '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞' in text:
        f = io.StringIO(text.replace('"', ''))  # —É–±—Ä–∞—Ç—å –∫–∞–≤—ã—á–∫–∏
        reader = csv.reader(f, delimiter=';')
        headers = next(reader)

        header_map = {h.strip(): i for i, h in enumerate(headers)}

        idx_lastname = header_map.get('–§–∞–º–∏–ª–∏—è', None)
        idx_firstname = header_map.get('–ò–º—è', None)
        idx_middlename = header_map.get('–û—Ç—á–µ—Å—Ç–≤–æ', None)
        idx_dob = header_map.get('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è', None)
        idx_phone = header_map.get('–¢–µ–ª–µ—Ñ–æ–Ω', None)
        idx_email = header_map.get('–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞', None)
        idx_address = header_map.get('–ê–¥—Ä–µ—Å', None)

        names, dob, phones, emails, addresses = [], [], [], [], []

        for row in reader:
            if len(row) < len(headers):
                continue  # —Å—Ç—Ä–æ–∫–∞ –Ω–µ–ø–æ–ª–Ω–∞—è

            lastname = row[idx_lastname].strip() if idx_lastname is not None and idx_lastname < len(row) else ''
            firstname = row[idx_firstname].strip() if idx_firstname is not None and idx_firstname < len(row) else ''
            middlename = row[idx_middlename].strip() if idx_middlename is not None and idx_middlename < len(row) else ''
            full_name = ' '.join([lastname, firstname, middlename]).strip()
            names.append(full_name if full_name else '')

            dob.append(row[idx_dob].strip() if idx_dob is not None and idx_dob < len(row) else '')
            phones.append(row[idx_phone].strip() if idx_phone is not None and idx_phone < len(row) else '')
            emails.append(row[idx_email].strip() if idx_email is not None and idx_email < len(row) else '')
            addresses.append(row[idx_address].strip() if idx_address is not None and idx_address < len(row) else '')

        return names, dob, phones, emails, addresses

    # –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    phones = re.findall(r'\+?\d{10,15}', text)
    emails = re.findall(r'[\w\.-]+@[\w\.-]+', text)
    names = re.findall(r'[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+ [–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?: [–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)?', text)
    dob = re.findall(r'\d{2}[./-]\d{2}[./-]\d{4}', text)
    addresses = []
    return names, dob, phones, emails, addresses


def colorize_bar(bar, percent):
    if percent < 30:
        color = '\033[91m'  # üî¥ –ö—Ä–∞—Å–Ω—ã–π
    elif percent < 70:
        color = '\033[93m'  # üü° –ñ—ë–ª—Ç—ã–π
    else:
        color = '\033[92m'  # üü¢ –ó–µ–ª—ë–Ω—ã–π
    reset = '\033[0m'
    return f"{color}{bar}{reset}"


def parse_file(file_path):
    try:
        content = ''
        file_size = os.path.getsize(file_path)
        read_size = 0

        def print_progress(percent):
            bar_length = 30
            filled_length = int(bar_length * percent // 100)
            bar = '‚ñà' * filled_length + '‚ñë' * (bar_length - filled_length)
            sys.stdout.write(f"\rüìÑ –ß—Ç–µ–Ω–∏–µ: {colorize_bar(f'[{bar}]', percent)} {percent}%")
            sys.stdout.flush()

        if file_path.endswith('.txt') or file_path.endswith('.csv'):
            with open(file_path, 'r', encoding='utf-8') as f:
                for line in f:
                    content += line
                    read_size += len(line.encode('utf-8'))
                    percent = int((read_size / file_size) * 100)
                    print_progress(percent)

        elif file_path.endswith('.docx'):
            doc = Document(file_path)
            total = len(doc.paragraphs)
            for i, p in enumerate(doc.paragraphs):
                content += p.text + '\n'
                percent = int((i + 1) / total * 100)
                print_progress(percent)

        elif file_path.endswith('.xlsx'):
            wb = openpyxl.load_workbook(file_path, read_only=True)
            total = sum(sheet.max_row for sheet in wb.worksheets)
            count = 0
            for sheet in wb.worksheets:
                for row in sheet.iter_rows(values_only=True):
                    line = ' '.join([str(cell) for cell in row if cell]) + '\n'
                    content += line
                    count += 1
                    percent = int((count / total) * 100)
                    print_progress(percent)
        else:
            print(f"‚ö†Ô∏è –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ {file_path} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

        print("\n‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω.")
        return content

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return ''


def create_database(folder):
    os.makedirs(folder, exist_ok=True)
    conn = sqlite3.connect(os.path.join(folder, 'base.db'))
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS people (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        dob TEXT,
        phone TEXT,
        email TEXT,
        address TEXT,
        tg_id TEXT,
        tg_username TEXT
    )''')
    conn.commit()
    return conn


def import_data_to_db(conn, names, dob, phones, emails, addresses, tg_ids, tg_usernames):
    try:
        c = conn.cursor()
        max_len = max(len(names), len(dob), len(phones), len(emails), len(tg_ids), len(tg_usernames))
        if max_len == 0:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.")
            return

        start_time = time.time()

        for i in range(max_len):
            c.execute("INSERT INTO people (name, dob, phone, email, address, tg_id, tg_username) VALUES (?, ?, ?, ?, ?, ?, ?)", (
                names[i] if i < len(names) else '',
                dob[i] if i < len(dob) else '',
                phones[i] if i < len(phones) else '',
                emails[i] if i < len(emails) else '',
                addresses[i] if i < len(addresses) else '',
                tg_ids[i] if i < len(tg_ids) else '',
                tg_usernames[i] if i < len(tg_usernames) else ''
            ))

            if (i + 1) % 100 == 0 or i == max_len - 1:
                conn.commit()

            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            percent = int((i + 1) / max_len * 100)
            elapsed = time.time() - start_time
            speed = (i + 1) / elapsed if elapsed > 0 else 0
            sys.stdout.write(
                f"\rüì• –ò–º–ø–æ—Ä—Ç: {i + 1}/{max_len} –∑–∞–ø–∏—Å–µ–π | {percent}% | –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.2f} –∑–∞–ø/—Å–µ–∫"
            )
            sys.stdout.flush()

        print("\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –≤ –±–∞–∑—É: {e}")


def confirm_import():
    choice = input("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
    return choice == '–¥–∞'


def import_database():
    print("üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ:")
    files = [f for f in os.listdir() if f.endswith(('.txt', '.docx', '.xlsx', '.csv'))]
    if not files:
        print("–§–∞–π–ª–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ—Ç.")
        return
    
    for i, f in enumerate(files, 1):
        print(f"{i}. {f}")

    # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
    try:
        file_num = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: ").strip())
        if file_num < 1 or file_num > len(files):
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞.")
            return
        filename = files[file_num - 1]
    except ValueError:
        print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –±–∞–∑—ã
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∞–∑—ã:")
    print("1. –û–±—ã—á–Ω–∞—è –±–∞–∑–∞ (–§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ —Ç.–¥.)")
    print("2. Telegram –±–∞–∑–∞ (ID, phone, username, first_name, last_name)")
    print("3. –ü–æ—á—Ç—ã –∏ –ø–∞—Ä–æ–ª–∏ (email:password)")
    print("4. –ü–æ—á—Ç–∞;–§–ò–û;–î–†;–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å;–ê–¥—Ä–µ—Å")
    print("5. ID|Full name|Birthday|Phone| (—Ñ–æ—Ä–º–∞—Ç —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º |)")  # –ù–û–í–´–ô –¢–ò–ü
    
    try:
        base_type = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∏–ø–∞ (1, 2, 3, 4 –∏–ª–∏ 5): ").strip())
        if base_type not in [1, 2, 3, 4, 5]:  # –î–æ–±–∞–≤–∏–ª–∏ 5
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –±–∞–∑—ã.")
            return
    except ValueError:
        print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    if filename.endswith('.csv'):
        if base_type == 1:
            names, dob, phones, emails, addresses = extract_regular_csv(filename)
            tg_ids, tg_usernames = [], []
        elif base_type == 2:
            names, dob, phones, emails, addresses, tg_ids, tg_usernames = extract_telegram_csv(filename)
        elif base_type == 3:
            emails, passwords = extract_email_password_csv(filename)
            names, dob, phones, addresses, tg_ids, tg_usernames = [], [], [], [], [], []
        elif base_type == 4:
            emails, names, dob, addresses = extract_email_fio_dob_address_csv(filename)
            phones, tg_ids, tg_usernames = [], [], []
        elif base_type == 5:  # –ù–û–í–´–ô –¢–ò–ü
            names, dob, phones = extract_pipe_format_csv(filename)
            emails, addresses, tg_ids, tg_usernames = [], [], [], []
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤
        content = parse_file(filename)
        if base_type == 1:
            names, dob, phones, emails, addresses = extract_data_from_text(content)
            tg_ids, tg_usernames = [], []
        elif base_type == 2:
            print("‚ùå –î–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω–∞—è –±–∞–∑–∞.")
            return
        elif base_type == 3:
            emails, passwords = extract_email_password_text(content)
            names, dob, phones, addresses, tg_ids, tg_usernames = [], [], [], [], [], []
        elif base_type == 4:
            emails, names, dob, addresses = extract_email_fio_dob_address_text(content)
            phones, tg_ids, tg_usernames = [], [], []
        elif base_type == 5:  # –ù–û–í–´–ô –¢–ò–ü
            names, dob, phones = extract_pipe_format_text(content)
            emails, addresses, tg_ids, tg_usernames = [], [], [], []

    # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    print("\nüìä –ù–∞–π–¥–µ–Ω–æ:")
    if base_type == 3:
        print(f"‚îúüìß –ü–æ—á—Ç—ã: {len(emails)}")
        print(f"‚îúüîë –ü–∞—Ä–æ–ª–∏: {len(passwords)}")
        print(f"‚ï∞üì¶ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(emails)}")
    elif base_type == 4:
        print(f"‚îúüìß –ü–æ—á—Ç—ã: {len(emails)}")
        print(f"‚îúüë§ –§–ò–û: {len(names)}")
        print(f"‚îúüéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {len(dob)}")
        print(f"‚îúüìç –ê–¥—Ä–µ—Å–∞: {len(addresses)}")
        print(f"‚ï∞üì¶ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {max(len(emails), len(names), len(dob), len(addresses))}")
    elif base_type == 5:  # –ù–û–í–´–ô –¢–ò–ü
        print(f"‚îúüë§ –§–ò–û: {len(names)}")
        print(f"‚îúüéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {len(dob)}")
        print(f"‚îúüìû –¢–µ–ª–µ—Ñ–æ–Ω—ã: {len(phones)}")
        print(f"‚ï∞üì¶ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {max(len(names), len(dob), len(phones))}")
    else:
        print(f"‚îúüë§ –§–ò–û: {len(names)}")
        print(f"‚îúüéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {len(dob)}")
        print(f"‚îúüìû –¢–µ–ª–µ—Ñ–æ–Ω—ã: {len(phones)}")
        print(f"‚îúüìß –ü–æ—á—Ç—ã: {len(emails)}")
        if base_type == 2:
            print(f"‚îúüÜî Telegram ID: {len(tg_ids)}")
            print(f"‚îúüë§ Telegram —é–∑–µ—Ä–Ω–µ–π–º—ã: {len(tg_usernames)}")
        print(f"‚ï∞üì¶ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {max(len(names), len(dob), len(phones), len(emails), len(tg_ids), len(tg_usernames))}")

    if confirm_import():
        base_name = os.path.splitext(os.path.basename(filename))[0]
        base_path = os.path.join(BASE_DIR, base_name)
        conn = create_database(base_path)
        
        if base_type == 3:
            import_data_to_db(conn, names, dob, phones, emails, addresses, tg_ids, tg_usernames)
            create_email_password_table(conn)
            import_email_password_data(conn, emails, passwords)
        elif base_type == 4:
            import_data_to_db(conn, names, dob, phones, emails, addresses, tg_ids, tg_usernames)
        elif base_type == 5:  # –ù–û–í–´–ô –¢–ò–ü
            import_data_to_db(conn, names, dob, phones, emails, addresses, tg_ids, tg_usernames)
        else:
            import_data_to_db(conn, names, dob, phones, emails, addresses, tg_ids, tg_usernames)
            
        conn.close()
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
    else:
        print("‚ùå –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω.")

def extract_telegram_csv(file_path):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram CSV –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'id|name|fname|phone|uid|nik|wo'"""
    names, dob, phones, emails, addresses, tg_ids, tg_usernames = [], [], [], [], [], [], []
    
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            for line in f:
                parts = line.strip().split('|')
                if len(parts) < 6:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è: phone –∏ uid
                    continue
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                phone = parts[3].strip() if len(parts) > 3 else ''
                if phone:
                    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ (–¥–æ–±–∞–≤–ª—è–µ–º +7 –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏–ª–∏ 8)
                    if phone.startswith('7') and len(phone) == 11:
                        phone = f"+{phone}"
                    elif phone.startswith('8') and len(phone) == 11:
                        phone = f"+7{phone[1:]}"
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
                    phone = ''.join(c for c in phone if c.isdigit() or c == '+')
                
                # Telegram ID
                tg_id = parts[4].strip() if len(parts) > 4 else ''
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ username (–Ω–∏–∫–Ω–µ–π–º–∞)
                username = parts[5].strip() if len(parts) > 5 else ''
                if username and not username.startswith('@'):
                    username = f"@{username}"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∏–∑ name –∏ fname
                name_parts = []
                if len(parts) > 1 and parts[1].strip():
                    name_parts.append(parts[1].strip())
                if len(parts) > 2 and parts[2].strip():
                    name_parts.append(parts[2].strip())
                name = ' '.join(name_parts) if name_parts else ''
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–∫–∏
                if phone:
                    phones.append(phone)
                if tg_id:
                    tg_ids.append(tg_id)
                if username:
                    tg_usernames.append(username)
                if name:
                    names.append(name)
                
                # –ü—É—Å—Ç—ã–µ –ø–æ–ª—è –¥–ª—è Telegram –±–∞–∑—ã
                dob.append('')
                emails.append('')
                addresses.append('')
                
        return names, dob, phones, emails, addresses, tg_ids, tg_usernames
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Telegram CSV: {e}")
        return [], [], [], [], [], [], []

def extract_regular_csv(file_path):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ CSV"""
    # –ó–¥–µ—Å—å –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—à—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é extract_data_from_csv_file,
    # –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –∑–Ω–∞—á–µ–Ω–∏–π –∏ –¥–≤–∞ –ø—É—Å—Ç—ã—Ö —Å–ø–∏—Å–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    names, dob, phones, emails, addresses = extract_data_from_csv_file(file_path)
    return names, dob, phones, emails, addresses, [], []

def extract_email_password_csv(file_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ—á—Ç—ã –∏ –ø–∞—Ä–æ–ª–∏ –∏–∑ CSV —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ email:password"""
    emails = []
    passwords = []
    
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            reader = csv.reader(f)
            for row in reader:
                if len(row) >= 1:
                    line = row[0].strip()
                    if ':' in line:
                        email, password = line.split(':', 1)
                        emails.append(email.strip())
                        passwords.append(password.strip())
                    elif '@' in line and any(c in line for c in ['|', ';', ',']):
                        # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
                        for sep in ['|', ';', ',']:
                            if sep in line:
                                parts = line.split(sep, 1)
                                if len(parts) == 2 and '@' in parts[0]:
                                    emails.append(parts[0].strip())
                                    passwords.append(parts[1].strip())
                                    break
        return emails, passwords
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSV —Å –ø–æ—á—Ç–∞–º–∏: {e}")
        return [], []

def extract_email_password_text(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ—á—Ç—ã –∏ –ø–∞—Ä–æ–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    emails = []
    passwords = []
    
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ email:password
    lines = text.split('\n')
    for line in lines:
        line = line.strip()
        if ':' in line and '@' in line.split(':')[0]:
            email, password = line.split(':', 1)
            emails.append(email.strip())
            passwords.append(password.strip())
        elif '|' in line and '@' in line.split('|')[0]:
            email, password = line.split('|', 1)
            emails.append(email.strip())
            passwords.append(password.strip())
        elif ';' in line and '@' in line.split(';')[0]:
            email, password = line.split(';', 1)
            emails.append(email.strip())
            passwords.append(password.strip())
        elif re.match(r'[\w\.-]+@[\w\.-]+', line) and len(line.split()) >= 2:
            # –ï—Å–ª–∏ –ø–æ—á—Ç–∞ –∏ –ø–∞—Ä–æ–ª—å —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–±–µ–ª–æ–º
            parts = line.split()
            for i, part in enumerate(parts):
                if '@' in part:
                    emails.append(part.strip())
                    if i + 1 < len(parts):
                        passwords.append(parts[i + 1].strip())
                    else:
                        passwords.append('')
                    break
    
    return emails, passwords

def create_email_password_table(conn):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—á—Ç –∏ –ø–∞—Ä–æ–ª–µ–π"""
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS emails (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        email TEXT UNIQUE,
        password TEXT
    )''')
    conn.commit()

def import_email_password_data(conn, emails, passwords):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—á—Ç –∏ –ø–∞—Ä–æ–ª–µ–π –≤ –±–∞–∑—É"""
    try:
        c = conn.cursor()
        max_len = max(len(emails), len(passwords))
        
        for i in range(max_len):
            email = emails[i] if i < len(emails) else ''
            password = passwords[i] if i < len(passwords) else ''
            
            if email:  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ—á—Ç–∞
                c.execute("INSERT OR IGNORE INTO emails (email, password) VALUES (?, ?)", 
                         (email, password))
            
            if (i + 1) % 100 == 0:
                conn.commit()
                print(f"üìß –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {i + 1}/{max_len} –∑–∞–ø–∏—Å–µ–π")
        
        conn.commit()
        print(f"‚úÖ –ò–º–ø–æ—Ä—Ç –ø–æ—á—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {len(emails)} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ø–æ—á—Ç: {e}")

def extract_email_fio_dob_address_csv(file_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ü–û–ß–¢–ê;–§–ò–û;–î–†;–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å;–ê–¥—Ä–µ—Å"""
    emails, names, dob, addresses = [], [], [], []
    
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            reader = csv.reader(f, delimiter=';')
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
            first_line = next(reader, None)
            if first_line and '–ü–û–ß–¢–ê' in first_line[0] and '–§–ò–û' in first_line[1]:
                print("üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
                f.seek(0)
                reader = csv.reader(f, delimiter=';')
            
            for row in reader:
                if len(row) < 5:  # –ú–∏–Ω–∏–º—É–º 5 –ø–æ–ª–µ–π
                    continue
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è)
                email = row[0].strip() if row[0].strip() else ''
                fio = row[1].strip() if row[1].strip() else ''
                birth_date = row[2].strip() if row[2].strip() else ''
                address = row[4].strip() if len(row) > 4 and row[4].strip() else ''
                
                if email:
                    emails.append(email)
                    names.append(fio)
                    dob.append(birth_date)
                    addresses.append(address)
                
        return emails, names, dob, addresses
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSV —Ñ–æ—Ä–º–∞—Ç–∞ '–ü–û–ß–¢–ê;–§–ò–û;–î–†;–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å;–ê–¥—Ä–µ—Å': {e}")
        return [], [], [], []
    
def extract_email_fio_dob_address_text(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ü–û–ß–¢–ê;–§–ò–û;–î–†;–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å;–ê–¥—Ä–µ—Å"""
    emails, names, dob, addresses = [], [], [], []
    
    lines = text.split('\n')
    for line in lines:
        parts = line.split(';')
        if len(parts) >= 5:
            email = parts[0].strip()
            fio = parts[1].strip()
            birth_date = parts[2].strip()
            address = parts[4].strip() if len(parts) > 4 else ''
            
            if email and '@' in email:
                emails.append(email)
                names.append(fio)
                dob.append(birth_date)
                addresses.append(address)
    
    return emails, names, dob, addresses

def extract_pipe_format_csv(file_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ID|Full name|Birthday|Phone|"""
    names, dob, phones = [], [], []
    
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            for line in f:
                parts = line.strip().split('|')
                if len(parts) < 4:  # –ú–∏–Ω–∏–º—É–º 4 –ø–æ–ª—è
                    continue
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                full_name = parts[1].strip() if len(parts) > 1 else ''
                birth_date = parts[2].strip() if len(parts) > 2 else ''
                phone = parts[3].strip() if len(parts) > 3 else ''
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–µ Full name - –∏–∑–≤–ª–µ–∫–∞–µ–º –§–ò–û –∏–∑ —Å–∫–æ–±–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
                if '(' in full_name and ')' in full_name:
                    # –ò—â–µ–º –§–ò–û –≤ —Å–∫–æ–±–∫–∞—Ö
                    match = re.search(r'\((.*?)\)', full_name)
                    if match:
                        full_name = match.group(1).strip()
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
                if phone and phone.lower() != 'null':
                    phone = normalize_phone(phone)
                else:
                    phone = ''
                
                if full_name or birth_date or phone:
                    names.append(full_name)
                    dob.append(birth_date)
                    phones.append(phone)
                
        return names, dob, phones
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSV —Ñ–æ—Ä–º–∞—Ç–∞ 'ID|Full name|Birthday|Phone|': {e}")
        return [], [], []

def extract_pipe_format_text(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ID|Full name|Birthday|Phone|"""
    names, dob, phones = [], [], []
    
    lines = text.split('\n')
    for line in lines:
        parts = line.split('|')
        if len(parts) >= 4:
            full_name = parts[1].strip() if len(parts) > 1 else ''
            birth_date = parts[2].strip() if len(parts) > 2 else ''
            phone = parts[3].strip() if len(parts) > 3 else ''
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–µ Full name - –∏–∑–≤–ª–µ–∫–∞–µ–º –§–ò–û –∏–∑ —Å–∫–æ–±–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
            if '(' in full_name and ')' in full_name:
                match = re.search(r'\((.*?)\)', full_name)
                if match:
                    full_name = match.group(1).strip()
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
            if phone and phone.lower() != 'null':
                phone = normalize_phone(phone)
            else:
                phone = ''
            
            if full_name or birth_date or phone:
                names.append(full_name)
                dob.append(birth_date)
                phones.append(phone)
    
    return names, dob, phones


# --- –ü–æ–∏—Å–∫ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ---

def normalize_phone(phone):
    if not phone:
        return ""
    
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –ø–ª—é—Å–∞
    phone = re.sub(r'[^\d+]', '', str(phone))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
    if phone.startswith('8') and len(phone) == 11:
        return '+7' + phone[1:]
    elif phone.startswith('7') and len(phone) == 11:
        return '+' + phone
    elif len(phone) == 10 and not phone.startswith('+'):
        return '+7' + phone
    
    return phone


def search_number_variants(conn, phone):
    phone_plus = normalize_phone(phone)
    phone_plain = phone_plus.lstrip('+')

    c = conn.cursor()
    c.execute("SELECT * FROM people WHERE phone LIKE ? OR phone LIKE ?", (f'%{phone_plus}%', f'%{phone_plain}%'))
    return c.fetchall()


def get_phone_info(phone):
    try:
        parsed = phonenumbers.parse(normalize_phone(phone), None)
        country = geocoder.country_name_for_number(parsed, "ru")
        region = geocoder.description_for_number(parsed, "ru")
        operator = carrier.name_for_number(parsed, "ru")
        country = country if country else None
        region = region if region else None
        operator = operator if operator else None
        return operator, region, country
    except:
        return None, None, None


def calculate_age(dob):
    try:
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç—ã
        for fmt in ("%d.%m.%Y", "%Y-%m-%d", "%d-%m-%Y"):
            try:
                dob_date = datetime.strptime(dob, fmt)
                break
            except ValueError:
                continue
        else:
            return None  # –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –¥–∞—Ç—É

        today = datetime.today()
        age = today.year - dob_date.year - ((today.month, today.day) < (dob_date.month, dob_date.day))
        return age
    except:
        return None




def format_report(record):
    # --- –ü–æ—á—Ç–æ–≤–∞—è –±–∞–∑–∞ (emails) ---
    if len(record) == 3 and '@' in str(record[1]):
        _, email, password = record
        lines = []
        lines.append("üìß –ü–æ—á—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        lines.append(f"‚îú Email: {email}")
        if password:
            lines.append(f"‚ï∞ –ü–∞—Ä–æ–ª—å: {password}")
        return "\n".join(lines)

    # --- –ë–∞–∑–∞ people (—Å tg_id –∏ tg_username) ---
    if len(record) == 8:
        _, name, dob, phone, email, address, tg_id, tg_username = record
    else:  # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–±–µ–∑ tg_id, tg_username)
        _, name, dob, phone, email, address = record
        tg_id, tg_username = None, None

    operator, region, country = get_phone_info(phone) if phone else (None, None, None)
    age = calculate_age(dob) if dob else None

    lines = []

    if phone:
        lines.append("üì± ")
        lines.append(f"‚îú –¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
        if operator:
            lines.append(f"‚îú –û–ø–µ—Ä–∞—Ç–æ—Ä: {operator}")
        if region:
            lines.append(f"‚îú –†–µ–≥–∏–æ–Ω: {region}")
        if country:
            lines.append(f"‚ï∞ –°—Ç—Ä–∞–Ω–∞: {country}")

    if name or dob:
        lines.append("\nüë§ –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        if name:
            lines.append(f"‚îú –§–ò–û: {name}")
        if dob:
            lines.append(f"‚îú –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dob}")
            if age is not None:
                lines.append(f"‚ï∞ –í–æ–∑—Ä–∞—Å—Ç: {age}")

    if email:
        lines.append(f"\n‚ï∞üìß E-mail: {email}")

    if address:
        lines.append(f"\n‚ï∞üìç –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å: {address}")

    if tg_id or tg_username:
        lines.append("\nüîπ Telegram –¥–∞–Ω–Ω—ã–µ")
        if tg_id:
            lines.append(f"‚îú ID: {tg_id}")
        if tg_username:
            username = f"@{tg_username}" if tg_username and not tg_username.startswith('@') else tg_username
            lines.append(f"‚ï∞ Username: {username}")

    if not (operator or region or country or tg_id or tg_username):
        lines.append("\n‚ùó –ü–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

    return "\n".join(lines)


def search_all_databases_by_phone(phone):
    results = []
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä
    phone = phone.strip().replace(" ", "").replace("-", "").replace("(", "").replace(")", "")
    
    print(f"üîç –ò—Å—Ö–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞: {phone}")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_variants = set()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
    search_variants.add(phone)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
    if phone.startswith('+7') and len(phone) == 12:
        # +79500467560 ‚Üí –≤–∞—Ä–∏–∞–Ω—Ç—ã: +79500467560, 79500467560, 89500467560, 9500467560
        clean_phone = phone[2:]  # 9500467560
        search_variants.update([
            phone,                    # +79500467560
            '7' + clean_phone,       # 79500467560
            '8' + clean_phone,       # 89500467560
            clean_phone              # 9500467560
        ])
    elif phone.startswith('7') and len(phone) == 11:
        # 79500467560 ‚Üí –≤–∞—Ä–∏–∞–Ω—Ç—ã: +79500467560, 79500467560, 89500467560, 9500467560
        search_variants.update([
            '+7' + phone[1:],        # +79500467560
            phone,                    # 79500467560
            '8' + phone[1:],         # 89500467560
            phone[1:]                # 9500467560
        ])
    elif phone.startswith('8') and len(phone) == 11:
        # 89500467560 ‚Üí –≤–∞—Ä–∏–∞–Ω—Ç—ã: +79500467560, 79500467560, 89500467560, 9500467560
        search_variants.update([
            '+7' + phone[1:],        # +79500467560
            '7' + phone[1:],         # 79500467560
            phone,                    # 89500467560
            phone[1:]                # 9500467560
        ])
    elif len(phone) == 10 and not phone.startswith(('+', '7', '8')):
        # 9500467560 ‚Üí –≤–∞—Ä–∏–∞–Ω—Ç—ã: +79500467560, 79500467560, 89500467560, 9500467560
        search_variants.update([
            '+7' + phone,            # +79500467560
            '7' + phone,             # 79500467560
            '8' + phone,             # 89500467560
            phone                    # 9500467560
        ])
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    search_variants = [v for v in search_variants if v]
    
    print(f"üîç –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞: {search_variants}")
    
    for folder in os.listdir(BASE_DIR):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º Telegram-–ø–∞–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        if 'telegram' in folder.lower() or '–≥–ª–∞–∑' in folder.lower():
            continue
            
        db_path = os.path.join(BASE_DIR, folder, 'base.db')
        if not os.path.exists(db_path):
            continue
            
        conn = sqlite3.connect(db_path)
        c = conn.cursor()
        
        # –ò—â–µ–º –ø–æ –≤—Å–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
        for variant in search_variants:
            # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            c.execute("SELECT * FROM people WHERE phone = ?", (variant,))
            exact_matches = c.fetchall()
            
            # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–æ–º–µ—Ä —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–∞–≤–µ —Å—Ç—Ä–æ–∫–∏)
            c.execute("SELECT * FROM people WHERE phone LIKE ?", (f'%{variant}%',))
            partial_matches = c.fetchall()
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            all_matches = exact_matches + partial_matches
            
            for record in all_matches:
                if (folder, record) not in results:  # –∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                    results.append((folder, record))
        
        conn.close()
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
    return results



def search_all_databases_by_query(query):
    query = query.strip()
    results = []
    
    print(f"üîç –û–±—â–∏–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞
    is_tg_search = query.lower().startswith('tg_')
    search_phone = re.match(r'\+?[0-9\s\-\(\)]{10,15}$', query) or (is_tg_search and re.match(r'\+?[0-9\s\-\(\)]{10,15}$', query[3:]))
    
    print(f"üîç –≠—Ç–æ –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {bool(search_phone)}")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    if search_phone and not is_tg_search:
        print("üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É")
        return search_all_databases_by_phone(query)
    
    for folder in os.listdir(BASE_DIR):
        db_path = os.path.join(BASE_DIR, folder, 'base.db')
        if not os.path.exists(db_path):
            continue
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, Telegram –ª–∏ —ç—Ç–æ –±–∞–∑–∞
        is_tg_base = 'telegram' in folder.lower() or '–≥–ª–∞–∑' in folder.lower()
        
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º Telegram-–±–∞–∑—ã
        if not is_tg_search and is_tg_base:
            continue
            
        conn = sqlite3.connect(db_path)
        c = conn.cursor()
        
        try:
            if is_tg_search:
                clean_query = query[3:]  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å tg_
                
                # –ï—Å–ª–∏ –ø–æ—Å–ª–µ tg_ –∏–¥–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                if re.match(r'\+?[0-9\s\-\(\)]{10,15}$', clean_query):
                    return search_all_databases_by_phone(clean_query)
                # –ò–Ω–∞—á–µ –∏—â–µ–º –ø–æ Telegram –¥–∞–Ω–Ω—ã–º
                elif clean_query.startswith('@'):
                    c.execute("SELECT * FROM people WHERE tg_username LIKE ?", 
                            ('%' + clean_query[1:] + '%',))
                else:
                    c.execute("SELECT * FROM people WHERE tg_id LIKE ?", 
                            ('%' + clean_query + '%',))
            
            elif '@' in query and '.' in query.split('@')[-1]:
                # üîç –ü–æ–∏—Å–∫ email –≤ people
                c.execute("SELECT * FROM people WHERE email LIKE ?", ('%' + query + '%',))
                results.extend((folder, row) for row in c.fetchall())
                
                # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ emails
                c.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='emails'")
                if c.fetchone():
                    c.execute("SELECT * FROM emails WHERE email LIKE ?", ('%' + query + '%',))
                    results.extend((folder, row) for row in c.fetchall())
                continue  # —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å extend –Ω–∏–∂–µ
            
            else:
                # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
                c.execute("SELECT * FROM people WHERE name LIKE ?", ('%' + query + '%',))
            
            results.extend((folder, row) for row in c.fetchall())
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –±–∞–∑–µ {folder}: {e}")
        finally:
            conn.close()
    
    print(f"üîç –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
    return results


def search_telegram_data(query):
    results = []
    for folder in os.listdir(BASE_DIR):
        # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –≤ Telegram-–ø–∞–ø–∫–∞—Ö
        if not ('telegram' in folder.lower() or '–≥–ª–∞–∑' in folder.lower()):
            continue
            
        db_path = os.path.join(BASE_DIR, folder, 'base.db')
        if not os.path.exists(db_path):
            continue
            
        conn = sqlite3.connect(db_path)
        c = conn.cursor()
        
        if query.startswith('@'):
            c.execute("SELECT * FROM people WHERE tg_username LIKE ?", ('%' + query[1:] + '%',))
        else:
            c.execute("SELECT * FROM people WHERE tg_id LIKE ?", ('%' + query + '%',))
            
        results.extend((folder, row) for row in c.fetchall())
        conn.close()
    
    return results



# --- Telegram Bot Handlers ---

@bot.message_handler(commands=['start'])
def start_message(message):
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("üìÑ –û—Ç–∫—Ä—ã—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", url="https://fenix-osint.site/agreement.html"))
    markup.add(telebot.types.InlineKeyboardButton("‚òÄÔ∏è –Ø –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω", callback_data="agree"))

    agreement_text = (
        "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∏–º –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã."
    )

    bot.send_message(
        message.chat.id,
        agreement_text,
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == "agree")
def handle_agreement_confirm(call):
    welcome_text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *Fenix-Osint* –±–æ—Ç!"
    
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="start_search"))
    markup.add(InlineKeyboardButton("‚òÄÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription_menu"))
    markup.add(InlineKeyboardButton("‚òÄÔ∏è –ë–∞–ª–∞–Ω—Å", callback_data="balance_menu"))
    markup.add(InlineKeyboardButton("‚òÄÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="user_info"))
    
    if is_admin(call.from_user.id):
        markup.add(InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_menu"))

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=welcome_text,
        parse_mode="Markdown",
        reply_markup=markup
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "admin_menu")
def admin_menu(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º", callback_data="admin_balance_menu"))
    markup.add(InlineKeyboardButton("üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", callback_data="admin_subs_menu"))
    markup.add(InlineKeyboardButton("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π", callback_data="admin_stats_menu"))
    markup.add(InlineKeyboardButton("‚ùÆ –ù–∞–∑–∞–¥", callback_data="main_menu"))

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=markup
    )
    bot.answer_callback_query(call.id)

# üëá –í–°–¢–ê–í–¨ –°–Æ–î–ê:
@bot.callback_query_handler(func=lambda call: call.data == "main_menu")
def go_main_menu(call):
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        bot.answer_callback_query(call.id)
        
        welcome_text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Fenix-Osint –±–æ—Ç!"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="start_search"))
        markup.add(InlineKeyboardButton("‚òÄÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription_menu"))
        markup.add(InlineKeyboardButton("‚òÄÔ∏è –ë–∞–ª–∞–Ω—Å", callback_data="balance_menu"))
        markup.add(InlineKeyboardButton("‚òÄÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="user_info"))
        
        if is_admin(call.from_user.id):
            markup.add(InlineKeyboardButton("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º", callback_data="admin_balance_menu"))
            markup.add(InlineKeyboardButton("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", callback_data="admin_subs_menu"))
            markup.add(InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_menu"))

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            current_text = bot.get_chat(call.message.chat.id).pinned_message.text
        except:
            current_text = None

        # –ò–∑–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
        if current_text != welcome_text:
            try:
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=welcome_text,
                    reply_markup=markup
                )
            except Exception as edit_error:
                if "message is not modified" not in str(edit_error):
                    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    bot.send_message(
                        call.message.chat.id,
                        welcome_text,
                        reply_markup=markup
                    )
    except Exception as e:
        print(f"Error in main menu: {e}")
        try:
            bot.send_message(
                call.message.chat.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=markup
            )
        except:
            pass

def safe_edit_message(bot, call, new_text, new_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        bot.answer_callback_query(call.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            current_msg = bot.get_chat(call.message.chat.id).pinned_message
            current_text = current_msg.text if current_msg else None
            current_markup = current_msg.reply_markup if current_msg else None
        except:
            current_text = None
            current_markup = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω—è—Ç—å
        if current_text == new_text and current_markup == new_markup:
            return False

        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å
        try:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=new_text,
                reply_markup=new_markup
            )
            return True
        except Exception as e:
            if "message is not modified" in str(e):
                return False
            raise e
            
    except Exception as e:
        print(f"Safe edit error: {e}")
        return False

@bot.callback_query_handler(func=lambda call: call.data == "subscription_menu")
def show_subscription_menu(call):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚òÄÔ∏è 1 –¥–µ–Ω—å ‚Äî 25‚ÇΩ", callback_data="buy_sub_1d"))
    markup.add(InlineKeyboardButton("‚òÄÔ∏è 7 –¥–Ω–µ–π ‚Äî 89‚ÇΩ", callback_data="buy_sub_7d"))
    markup.add(InlineKeyboardButton("‚òÄÔ∏è 30 –¥–Ω–µ–π ‚Äî 249‚ÇΩ", callback_data="buy_sub_30d"))
    markup.add(InlineKeyboardButton("‚òÄÔ∏è 365 –¥–Ω–µ–π ‚Äî 490‚ÇΩ", callback_data="buy_sub_365d"))
    markup.add(InlineKeyboardButton("‚ùÆ –ù–∞–∑–∞–¥", callback_data="main_menu"))

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_sub_"))
def buy_subscription(call):
    user_id = call.from_user.id
    options = {
        "buy_sub_1d": (25, "1 –¥–µ–Ω—å"),
        "buy_sub_7d": (89, "7 –¥–Ω–µ–π"),
        "buy_sub_30d": (249, "30 –¥–Ω–µ–π"),
        "buy_sub_365d": (490, "365 –¥–Ω–µ–π"),
    }
    
    if call.data not in options:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏")
        return

    cost, duration_text = options[call.data]
    balance = get_balance(user_id)
    
    if balance < cost:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        return

    try:
        bot.answer_callback_query(call.id, f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {duration_text} –∑–∞ {cost}‚ÇΩ")
        
        new_text = f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {duration_text} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\nüí∞ –°–ø–∏—Å–∞–Ω–Ω–æ: {cost}‚ÇΩ\nüí≥ –û—Å—Ç–∞—Ç–æ–∫: {balance - cost}‚ÇΩ"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚ùÆ –ù–∞–∑–∞–¥", callback_data="main_menu"))

        try:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=new_text,
                reply_markup=markup
            )
        except:
            bot.send_message(call.message.chat.id, new_text, reply_markup=markup)

        deduct_balance(user_id, cost)
        duration_seconds = {
            "1 –¥–µ–Ω—å": 86400,
            "7 –¥–Ω–µ–π": 7 * 86400,
            "30 –¥–Ω–µ–π": 30 * 86400,
            "365 –¥–Ω–µ–π": 365 * 86400,
        }[duration_text]
        add_subscription(user_id, duration_seconds)

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É
        user_info = f"{call.from_user.first_name} {call.from_user.last_name or ''} (@{call.from_user.username or '–Ω–µ—Ç'})"
        sub_log = f"üé´ –ü–û–ö–£–ü–ö–ê –ü–û–î–ü–ò–°–ö–ò\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}\nüÜî ID: {user_id}\nüì¶ –ü–æ–¥–ø–∏—Å–∫–∞: {duration_text}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost}‚ÇΩ"
        send_log_message(sub_log)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏")


@bot.callback_query_handler(func=lambda call: call.data == "balance_menu")
def balance_menu(call):
    user_id = call.from_user.id
    balance = get_balance(user_id)
    
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="topup_amount"),
        InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data="payment_history")
    )
    markup.row(InlineKeyboardButton("‚ùÆ –ù–∞–∑–∞–¥", callback_data="main_menu"))

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}‚ÇΩ",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "topup_amount")
def topup_amount(call):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚ùÆ –ù–∞–∑–∞–¥", callback_data="balance_menu"))

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n"
             "üí≥ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ–π –∏–ª–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É: @Fenix_Support_BBot",
        reply_markup=markup
    )




user_states = {}  # –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
search_states = {}  # –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞


@bot.callback_query_handler(func=lambda call: call.data == "start_search")
def start_search_callback(call):
    user_id = call.from_user.id
    search_states[user_id] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–∏—Å–∫–∞

    if not is_subscribed(user_id):
        safe_answer_callback_query(bot, call)
        bot.send_message(
            call.message.chat.id,
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –µ—ë –≤ —Ä–∞–∑–¥–µ–ª–µ üì¶ –ü–æ–¥–ø–∏—Å–∫–∞."
        )
        return

    safe_answer_callback_query(bot, call)

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="cancel_search"))

    msg = bot.send_message(
        call.message.chat.id,
        "üîç –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–§–ò–û, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ email):",
        reply_markup=markup
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    search_states[user_id] = {
        'active': True,
        'cancel_message_id': msg.message_id
    }
    
    bot.register_next_step_handler(msg, process_search_input)

@bot.callback_query_handler(func=lambda call: call.data == "cancel_search")
def cancel_search_handler(call):
    try:
        user_id = call.from_user.id
        
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        if user_id in search_states:
            del search_states[user_id]
            
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        
        # –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω")
    except Exception as e:
        print(f"Error canceling search: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫")



def process_search_input(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω –ª–∏ –ø–æ–∏—Å–∫
    if user_id not in search_states or not search_states[user_id].get('active', False):
        return

    if 'cancel_message_id' in search_states[user_id]:
        try:
            bot.delete_message(
                chat_id=message.chat.id,
                message_id=search_states[user_id]['cancel_message_id']
            )
        except:
            pass

    if user_id in search_states:
        del search_states[user_id]

    cleanup_user_messages(user_id, message.chat.id)

    if not is_subscribed(user_id):
        msg = bot.send_message(message.chat.id, "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.")
        threading.Timer(5.0, lambda: bot.delete_message(msg.chat.id, msg.message_id)).start()
        return

    query = message.text.strip()

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞
    user_info = f"{message.from_user.first_name} {message.from_user.last_name or ''} (@{message.from_user.username or '–Ω–µ—Ç'})"
    log_text = f"üîç –ü–û–ò–°–ö\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}\nüÜî ID: {user_id}\nüìã –ó–∞–ø—Ä–æ—Å: {query}"
    send_log_message(log_text)

    # --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞ ---
    if query.startswith(('tg_', 'tg-')):
        search_type = "telegram"
        query = query[3:]
    else:
        is_phone = re.fullmatch(r'\+?[0-9\s\-\(\)]{10,15}', query)
        is_email = '@' in query and '.' in query.split('@')[-1]
        has_name = any(c.isalpha() for c in query)
        dob_pattern = r'\d{2}[./-]\d{2}[./-]\d{4}'
        dob_pattern_iso = r'\d{4}-\d{2}-\d{2}'
        has_dob = re.search(dob_pattern, query) or re.search(dob_pattern_iso, query)
        
        if is_phone:
            search_type = "phone"
        elif is_email:
            search_type = "email"
        elif has_name and has_dob:
            search_type = "name_dob"
        elif has_name and len(query.split()) >= 2:
            search_type = "name"
        else:
            bot.send_message(
                message.chat.id,
                "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞.",
                parse_mode="Markdown"
            )
            return

    bot.send_chat_action(message.chat.id, 'typing')
    search_sticker = bot.send_sticker(
        message.chat.id,
        "CAACAgIAAxkBAAIN9miXYjnEC2M24mONWK2FjHMl0dRWAAIUfQAC2CSxSNb7vkhBE8QnNgQ"
    )
    search_msg = bot.send_message(message.chat.id, "–ò–¥—ë—Ç –ø–æ–∏—Å–∫ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

    try:
        if search_type == "telegram":
            results = search_telegram_data(query)
        elif search_type == "phone":
            results = search_all_databases_by_phone(query)
        else:
            results = search_all_databases_by_query(query)

        try:
            bot.delete_message(message.chat.id, search_sticker.message_id)
            bot.delete_message(message.chat.id, search_msg.message_id)
        except:
            pass

        if not results:
            bot.send_message(message.chat.id, "–í –Ω–∞—à–∏—Ö –±–∞–∑–∞—Ö –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
            result_log = f"‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–û–ò–°–ö–ê\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}\nüìã –ó–∞–ø—Ä–æ—Å: {query}\nüìä –ù–∞–π–¥–µ–Ω–æ: 0 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
            send_log_message(result_log)
            return

        for base_name, record in results[:5]:
            report = format_report(record)
            bot.send_message(
                message.chat.id,
                f"üìÇ –ë–∞–∑–∞: {base_name}\n\n{report}"
            )

        if len(results) > 5:
            bot.send_message(
                message.chat.id,
                f"‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞–Ω–æ 5 –∏–∑ {len(results)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
            )

        result_log = f"‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–û–ò–°–ö–ê\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}\nüìã –ó–∞–ø—Ä–æ—Å: {query}\nüìä –ù–∞–π–¥–µ–Ω–æ: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        send_log_message(result_log)

    except Exception as e:
        try:
            bot.delete_message(message.chat.id, search_msg.message_id)
        except:
            pass
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
        error_log = f"‚ö†Ô∏è –û–®–ò–ë–ö–ê –ü–û–ò–°–ö–ê\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}\nüìã –ó–∞–ø—Ä–æ—Å: {query}\n‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        send_log_message(error_log)

def search_telegram_data(query):
    """–ü–æ–∏—Å–∫ Telegram –¥–∞–Ω–Ω—ã—Ö –ø–æ ID –∏–ª–∏ username"""
    results = []
    for folder in os.listdir(BASE_DIR):
        # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –≤ –ø–∞–ø–∫–∞—Ö —Å "Telegram" –∏–ª–∏ "–≥–ª–∞–∑" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        if not ('telegram' in folder.lower() or '–≥–ª–∞–∑' in folder.lower()):
            continue
            
        db_path = os.path.join(BASE_DIR, folder, 'base.db')
        if not os.path.exists(db_path):
            continue

        conn = sqlite3.connect(db_path)
        c = conn.cursor()
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @ - –∏—â–µ–º –ø–æ username
        if query.startswith('@'):
            c.execute("SELECT * FROM people WHERE tg_username LIKE ?", ('%' + query[1:] + '%',))
        else:
            # –ò–Ω–∞—á–µ –∏—â–µ–º –ø–æ ID
            c.execute("SELECT * FROM people WHERE tg_id LIKE ?", ('%' + query + '%',))
            
        rows = c.fetchall()
        conn.close()
        for row in rows:
            results.append((folder, row))
    
    return results



# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
@bot.message_handler(commands=['clear'])
def clear_chat(message):
    user_id = message.from_user.id
    cleanup_user_messages(user_id, message.chat.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    messages = bot.get_chat_history(message.chat.id, limit=20)
    for msg in messages:
        if msg.from_user.id == bot.get_me().id:
            try:
                bot.delete_message(message.chat.id, msg.message_id)
            except:
                pass
    
    confirm = bot.send_message(message.chat.id, "‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")
    threading.Timer(2.0, lambda: bot.delete_message(confirm.chat.id, confirm.message_id)).start()
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except:
        pass


@bot.callback_query_handler(func=lambda call: call.data == "cancel_search")
def cancel_search(call):
    user_id = call.from_user.id
    user_states.pop(user_id, None)
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == "searching")
def handle_search_query(message):
    user_id = message.from_user.id
    query = message.text.strip()

    bot.send_chat_action(message.chat.id, 'typing')

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –æ–±—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    phone_match = re.match(r'\+?\d{10,15}$', query)
    
    if phone_match:
        results = search_all_databases_by_phone(query)
    else:
        results = search_all_databases_by_query(query)

    if not results:
        if phone_match:
            operator, region, country = get_phone_info(query)
            report = f"üì± \n‚îú –¢–µ–ª–µ—Ñ–æ–Ω: {normalize_phone(query)}"
            if operator:
                report += f"\n‚îú –û–ø–µ—Ä–∞—Ç–æ—Ä: {operator}"
            if region:
                report += f"\n‚îú –†–µ–≥–∏–æ–Ω: {region}"
            if country:
                report += f"\n‚îî –°—Ç—Ä–∞–Ω–∞: {country}"
            report += "\n\n‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–∞—Ö."
            bot.send_message(message.chat.id, report)
        else:
            bot.send_message(message.chat.id, "‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        # –û–≥—Ä–∞–Ω–∏—á–∏–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
        for base_name, record in results[:5]:
            report = format_report(record)
            bot.send_message(message.chat.id, f"–ë–∞–∑–∞: {base_name}\n\n{report}")

    user_states.pop(user_id, None)

def init_balance_db():
    os.makedirs('balance_service', exist_ok=True)
    conn = sqlite3.connect('balance_service/balance.db')
    conn.execute('CREATE TABLE IF NOT EXISTS balances (user_id INTEGER PRIMARY KEY, balance INTEGER DEFAULT 0)')
    conn.commit()
    conn.close()


def add_balance(user_id, amount):
    """–ü–æ–ø–æ–ª–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        balance_db_path = os.path.join('balance_service', 'balance.db')
        conn = sqlite3.connect(balance_db_path)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS balances (
                user_id INTEGER PRIMARY KEY,
                balance INTEGER NOT NULL DEFAULT 0
            )
        ''')
        
        cursor.execute('''
            INSERT OR IGNORE INTO balances (user_id, balance)
            VALUES (?, 0)
        ''', (user_id,))
        
        cursor.execute('''
            UPDATE balances
            SET balance = balance + ?
            WHERE user_id = ?
        ''', (amount, user_id))
        
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞]: {e}")
        return False

def deduct_balance(user_id, amount):
    conn = sqlite3.connect('balance_service/balance.db')
    c = conn.cursor()
    c.execute('UPDATE balances SET balance = balance - ? WHERE user_id = ? AND balance >= ?', (amount, user_id, amount))
    conn.commit()
    conn.close()

def get_balance(user_id):
    conn = sqlite3.connect('balance_service/balance.db')
    cursor = conn.cursor()

    # —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS balances (
            user_id INTEGER PRIMARY KEY,
            balance INTEGER NOT NULL DEFAULT 0
        )
    ''')

    cursor.execute("SELECT balance FROM balances WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()

    return result[0] if result else 0



def is_subscribed(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        init_subscription_db()
            
        subs_db_path = os.path.join('subscriptions_service', 'subs.db')
        conn = sqlite3.connect(subs_db_path)
        cursor = conn.cursor()
            
        cursor.execute("SELECT expires_at FROM subscriptions WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        conn.close()
        
        if result:
            return time.time() < result[0]
        return False
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏]: {e}")
        return False

def add_subscription(user_id, duration_seconds):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        init_subscription_db()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Å—Ä–æ–∫–∞ (5000 –¥–Ω–µ–π)
        max_days = 5000
        max_seconds = max_days * 86400
        
        if duration_seconds > max_seconds:
            duration_seconds = max_seconds
            print(f"‚ö†Ô∏è –°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω {max_days} –¥–Ω—è–º–∏")
        
        subs_db_path = os.path.join('subscriptions_service', 'subs.db')
        conn = sqlite3.connect(subs_db_path)
        cursor = conn.cursor()
        
        expires_at = int(time.time()) + duration_seconds
        cursor.execute('''
            INSERT OR REPLACE INTO subscriptions (user_id, expires_at)
            VALUES (?, ?)
        ''', (user_id, expires_at))
        
        conn.commit()
        conn.close()
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∏—Å—Ç–µ–∫–∞–µ—Ç: {datetime.fromtimestamp(expires_at)}")
        return True
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏]: {e}")
        return False


def init_subscription_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    os.makedirs('subscriptions_service', exist_ok=True)
    conn = sqlite3.connect('subscriptions_service/subs.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS subscriptions (
            user_id INTEGER PRIMARY KEY,
            expires_at INTEGER NOT NULL
        )
    ''')
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")


# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –≤—ã–∑–æ–≤ –≤ –Ω–∞—á–∞–ª–æ main_menu() –∏–ª–∏ –≤ init_databases()
def init_databases():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –ø–æ–¥–ø–∏—Å–æ–∫
        init_subscription_db()
        
        # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...
        os.makedirs('balance_service', exist_ok=True)
        balance_db_path = os.path.join('balance_service', 'balance.db')
        balance_conn = sqlite3.connect(balance_db_path)
        balance_cursor = balance_conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –±–∞–ª–∞–Ω—Å–æ–≤
        balance_cursor.execute('''
            CREATE TABLE IF NOT EXISTS balances (
                user_id INTEGER PRIMARY KEY,
                balance INTEGER NOT NULL DEFAULT 0
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        balance_cursor.execute('''
            CREATE TABLE IF NOT EXISTS payments (
                payment_id TEXT PRIMARY KEY,
                user_id INTEGER,
                amount INTEGER,
                status TEXT DEFAULT "pending",
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        balance_conn.commit()
        balance_conn.close()
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_conn = sqlite3.connect('stats.db')
        stats_cursor = stats_conn.cursor()
        stats_cursor.execute('''
            CREATE TABLE IF NOT EXISTS stats (
                base_name TEXT PRIMARY KEY,
                record_count INTEGER
            )
        ''')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ stats
        stats_cursor.execute("SELECT COUNT(*) FROM stats")
        if stats_cursor.fetchone()[0] == 0:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞
            stats_cursor.execute("INSERT INTO stats (base_name, record_count) VALUES (?, ?)", 
                               ("–û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞", 1000000))
        
        stats_conn.commit()
        stats_conn.close()
        
        print("‚úÖ –í—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)

def init_payments_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–ª–∞—Ç–µ–∂–µ–π"""
    conn = sqlite3.connect('balance_service/balance.db')
    conn.execute('''
        CREATE TABLE IF NOT EXISTS payments (
            payment_id TEXT PRIMARY KEY,
            user_id INTEGER,
            amount INTEGER,
            status TEXT DEFAULT "pending",
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()


def send_payment_notification(user_id, amount):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ successful payment"""
    try:
        bot.send_message(
            user_id,
            f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ!\n"
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_balance(user_id)}‚ÇΩ"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


ALLOWED_GROUP_ID = -1002991202021 # ID —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
PHOTO_PATH = "startup.jpg"         # –ü—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞


def leave_unallowed_chats():
    try:
        updates = bot.get_updates(limit=100)
        for update in updates:
            msg = update.message
            if msg and msg.chat.type in ["group", "supergroup"]:
                if msg.chat.id != ALLOWED_GROUP_ID:
                    try:
                        bot.leave_chat(msg.chat.id)
                    except:
                        pass
    except:
        pass


def send_startup_message():
    try:
        total_records = get_total_records_count()
        start_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        text = (
            f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n"
            f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {start_time}(+3 —á–∞—Å–∞)\n"
            f"üìÇ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤–æ –≤—Å–µ—Ö –±–∞–∑–∞—Ö: {total_records:,}"
        )
        with open(PHOTO_PATH, "rb") as photo:
            bot.send_photo(ALLOWED_GROUP_ID, photo, caption=text)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
        send_log_message("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {e}")



def main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ"""
    init_databases()
    while True:
        print("\n" + "="*20 + " FENIX OSINT " + "="*20)
        print("1. –ò–º–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç—å Telegram-–±–æ—Ç–∞")
        print("3. –í—ã–π—Ç–∏")

        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-3): ").strip()

        if choice == '1':
            import_database()
        elif choice == '2':
            leave_unallowed_chats()
            send_startup_message()
            run_bot()
        elif choice == '3':
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3")

    


@bot.callback_query_handler(func=lambda call: call.data == "admin_balance_menu")
def admin_balance_menu(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_add_balance"))
    markup.add(InlineKeyboardButton("üîÑ –û–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_reset_balance"))
    markup.add(InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="admin_delete_record"))  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    markup.add(InlineKeyboardButton("‚ùÆ –ù–∞–∑–∞–¥", callback_data="main_menu"))

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏:",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "admin_delete_record")
def admin_delete_record(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    msg = bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–§–ò–û –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞):"
    )
    bot.register_next_step_handler(msg, process_admin_delete_record_search)

def process_admin_delete_record_search(message):
    query = message.text.strip()
    results = search_all_databases_by_query(query)
    
    if not results:
        bot.send_message(message.chat.id, "–í –Ω–∞—à–∏—Ö –±–∞–∑–∞—Ö –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        return

    # –û–≥—Ä–∞–Ω–∏—á–∏–º –≤—ã–≤–æ–¥ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    for i, (base_name, record) in enumerate(results[:10]):
        _, name, dob, phone, email, address = record
        text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç {i+1} (–ë–∞–∑–∞: {base_name}):\n"
        if name: text += f"üë§ {name}\n"
        if dob: text += f"üéÇ {dob}\n"
        if phone: text += f"üìû {phone}\n"
        if email: text += f"üìß {email}\n"
        
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(
            "üóë –£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å", 
            callback_data=f"confirm_delete_{base_name}_{record[0]}"  # ID –∑–∞–ø–∏—Å–∏
        ))
        
        bot.send_message(
            message.chat.id,
            text,
            reply_markup=markup
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_delete_"))
def confirm_delete_record(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    parts = call.data.split('_')
    base_name = parts[2]
    record_id = parts[3]
    
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"final_delete_{base_name}_{record_id}"))
    markup.add(InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete"))
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("final_delete_"))
def final_delete_record(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    parts = call.data.split('_')
    base_name = parts[2]
    record_id = parts[3]
    
    db_path = os.path.join(BASE_DIR, base_name, 'base.db')
    if not os.path.exists(db_path):
        bot.answer_callback_query(call.id, "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    try:
        conn = sqlite3.connect(db_path)
        c = conn.cursor()
        c.execute("DELETE FROM people WHERE id = ?", (record_id,))
        conn.commit()
        conn.close()
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"
        )
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data == "cancel_delete")
def cancel_delete_record(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
@bot.callback_query_handler(func=lambda call: call.data == "admin_add_balance")
def admin_add_balance(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    msg = bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789 100):"
    )
    bot.register_next_step_handler(msg, process_admin_add_balance)

def process_admin_add_balance(message):
    try:
        parts = message.text.strip().split()
        if len(parts) != 2:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <ID> <—Å—É–º–º–∞>")
            return

        user_id, amount = map(int, parts)

        if add_balance(user_id, amount):
            new_balance = get_balance(user_id)

            bot.send_message(
                message.chat.id,
                f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ {amount}‚ÇΩ\n"
                f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}‚ÇΩ"
            )

            try:
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data="hide_msg"))
                bot.send_message(
                    user_id,
                    f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ!\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}‚ÇΩ",
                    reply_markup=markup
                )
            except:
                bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            admin_info = f"{message.from_user.first_name} {message.from_user.last_name or ''}"
            balance_log = f"üí∞ –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê\nüëë –ê–¥–º–∏–Ω: {admin_info}\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user_id}\nüíµ –°—É–º–º–∞: {amount}‚ÇΩ\nüí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}‚ÇΩ"
            send_log_message(balance_log)

        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}\n–§–æ—Ä–º–∞—Ç: <ID> <—Å—É–º–º–∞>")



# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ùå –°–∫—Ä—ã—Ç—å"
@bot.callback_query_handler(func=lambda call: call.data == "hide_msg")
def hide_message(call):
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
@bot.callback_query_handler(func=lambda call: call.data == "admin_reset_balance")
def admin_reset_balance(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    msg = bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:"
    )
    bot.register_next_step_handler(msg, process_admin_reset_balance)

def process_admin_reset_balance(message):
    try:
        user_id = int(message.text)
        conn = sqlite3.connect('balance_service/balance.db')
        c = conn.cursor()
        c.execute('UPDATE balances SET balance = 0 WHERE user_id = ?', (user_id,))
        conn.commit()
        conn.close()
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω—É–ª—ë–Ω."
        )
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚ùå –û—à–∏–±–∫–∞: {e}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )

def safe_answer_callback_query(bot, call, text=None, show_alert=False):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏–µ
    """
    try:
        bot.answer_callback_query(call.id, text=text, show_alert=show_alert)
    except ApiTelegramException as e:
        if "query is too old" in str(e):
            print(f"Callback query expired: {e}")
        else:
            raise e

@bot.callback_query_handler(func=lambda call: call.data == "admin_subs_menu")
def admin_subs_menu(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    menu_text = "üëë –ê–¥–º–∏–Ω: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_add_sub"),
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_remove_sub"),
        InlineKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_check_sub"),
        InlineKeyboardButton("‚ùÆ –ù–∞–∑–∞–¥", callback_data="main_menu")
    )

    if not safe_edit_message(bot, call, menu_text, markup):
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(
            call.message.chat.id,
            menu_text,
            reply_markup=markup
        )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "admin_add_sub")
def admin_add_sub(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    msg = bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–Ω—è—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–ü—Ä–∏–º–µ—Ä: 123456789 30"
    )
    bot.register_next_step_handler(msg, process_admin_add_sub)

def process_admin_add_sub(message):
    try:
        user_id, days = map(int, message.text.split())
        expires_at = int(time.time()) + days * 86400
        
        with db_lock:
            conn = sqlite3.connect('subscriptions_service/subs.db')
            cursor = conn.cursor()
            cursor.execute(
                "INSERT OR REPLACE INTO subscriptions (user_id, expires_at) VALUES (?, ?)",
                (user_id, expires_at)
            )
            conn.commit()
            conn.close()

        bot.send_message(
            message.chat.id,
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π"
        )
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚ùå –û—à–∏–±–∫–∞: {e}\n–§–æ—Ä–º–∞—Ç: ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ö–û–õ–ò–ß–ï–°–¢–í–û_–î–ù–ï–ô"
        )

@bot.callback_query_handler(func=lambda call: call.data == "admin_check_sub")
def admin_check_sub(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    msg = bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:"
    )
    bot.register_next_step_handler(msg, process_admin_check_sub)

def process_admin_check_sub(message):
    try:
        user_id = int(message.text)
        subscribed = is_subscribed(user_id)
        
        if subscribed:
            with db_lock:
                conn = sqlite3.connect('subscriptions_service/subs.db')
                cursor = conn.cursor()
                cursor.execute(
                    "SELECT expires_at FROM subscriptions WHERE user_id = ?",
                    (user_id,)
                )
                expires_at = cursor.fetchone()[0]
                conn.close()
            
            remaining = (expires_at - time.time()) / 86400
            text = (
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É\n"
                f"‚åõ –û—Å—Ç–∞–ª–æ—Å—å: {remaining:.1f} –¥–Ω–µ–π\n"
                f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {datetime.fromtimestamp(expires_at)}"
            )
        else:
            text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"

        bot.send_message(message.chat.id, text)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "admin_remove_sub")
def admin_remove_sub(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    msg = bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:"
    )
    bot.register_next_step_handler(msg, process_admin_remove_sub)

def process_admin_remove_sub(message):
    try:
        user_id = int(message.text)
        
        with db_lock:
            conn = sqlite3.connect('subscriptions_service/subs.db')
            cursor = conn.cursor()
            cursor.execute(
                "DELETE FROM subscriptions WHERE user_id = ?",
                (user_id,)
            )
            conn.commit()
            conn.close()

        bot.send_message(
            message.chat.id,
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–∞"
        )
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚ùå –û—à–∏–±–∫–∞: {e}"
        )

def safe_db_execute(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î"""
    def wrapper(*args, **kwargs):
        try:
            with db_lock:
                return func(*args, **kwargs)
        except sqlite3.OperationalError as e:
            if "database is locked" in str(e):
                time.sleep(0.5)
                return wrapper(*args, **kwargs)
            raise e
    return wrapper

db_lock = threading.Lock()

def run_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    try:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –≤—Å–µ –ë–î
        init_databases()        # –≤—ã–∑—ã–≤–∞–µ—Ç init_subscription_db –∏ init_balance_db
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        bot.infinity_polling()
    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
        print("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        time.sleep(5)
        run_bot()




@bot.callback_query_handler(func=lambda call: call.data == "top_up_balance")
async def top_up_balance(call):
    user_id = call.from_user.id
    markup = InlineKeyboardMarkup()
    
    # –í–∞—Ä–∏–∞–Ω—Ç—ã —Å—É–º–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    amounts = [15, 25, 50, 100, 500, 1000]
    for amount in amounts:
        markup.add(InlineKeyboardButton(
            f"{amount}‚ÇΩ", 
            callback_data=f"create_payment_{amount}"
        ))
    markup.add(InlineKeyboardButton("‚ùÆ –ù–∞–∑–∞–¥", callback_data="balance_menu"))

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=markup
    )






@bot.callback_query_handler(func=lambda call: call.data.startswith("check_payment_"))
def check_payment(call):
    try:
        # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É –Ω–∞ callback
        try:
            bot.answer_callback_query(call.id)
        except:
            pass
        
        payment_id = call.data.split("_")[-1]
        user_id = call.from_user.id
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: {payment_id}")
        
        # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        result = check_payment_local(payment_id)
        
        # –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω–∞—à–ª–∞, –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–µ–Ω–Ω—É—é
        if result.get("status") == "not_found":
            print("‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É")
            result = check_payment_remote(payment_id)
        
        status = result.get("status")
        print(f"üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {status}")
        
        if status == "completed":
            amount = result.get("amount", 0)
            balance = get_balance(user_id)
            
            bot.send_message(
                user_id,
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\nüí∞ –ó–∞—á–∏—Å–ª–µ–Ω–æ: {amount}‚ÇΩ\nüí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}‚ÇΩ"
            )
            
        elif status == "pending":
            bot.send_message(
                user_id,
                "‚åõ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã\n\n" +
                "–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
            )
            
        elif status == "expired":
            bot.send_message(
                user_id,
                "‚ùå –ü–ª–∞—Ç—ë–∂ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω\n\n" +
                "–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 2 —á–∞—Å–∞. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂."
            )
            
        elif status == "not_found":
            bot.send_message(user_id, "‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
            
        else:
            bot.send_message(
                user_id,
                "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n\n" +
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @Fenix_Support_BBot"
            )
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        try:
            bot.send_message(
                call.from_user.id,
                "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n\n" +
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @Fenix_Support_BBot"
            )
        except:
            pass



# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î ---
def save_payment_to_db(user_id, payment_id, amount):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–ª–∞—Ç—ë–∂ –≤ –ë–î"""
    try:
        conn = sqlite3.connect('balance_service/balance.db')
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS payments (
                payment_id TEXT PRIMARY KEY,
                user_id INTEGER,
                amount INTEGER,
                status TEXT DEFAULT "pending",
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute(
            "INSERT OR REPLACE INTO payments (payment_id, user_id, amount, status) VALUES (?, ?, ?, ?)",
            (payment_id, user_id, amount, 'pending')
        )
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –ü–ª–∞—Ç—ë–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {payment_id}, user: {user_id}, amount: {amount}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î: {e}")
        return False




# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
db_lock = threading.Lock()

WEBHOOK_SECRET = "https://fenix-webhook.site/hook.php"

def verify_signature(payload, signature):
    computed_signature = hmac.new(
        WEBHOOK_SECRET.encode(),
        payload,
        sha256
    ).hexdigest()
    return hmac.compare_digest(computed_signature, signature)




@bot.callback_query_handler(func=lambda call: call.data == "payment_history")
def payment_history(call):
    user_id = call.from_user.id
    conn = sqlite3.connect('balance_service/balance.db')
    cursor = conn.cursor()
    
    cursor.execute(
        "SELECT amount, status, created_at FROM payments WHERE user_id = ? ORDER BY created_at DESC LIMIT 5",
        (user_id,)
    )
    payments = cursor.fetchall()
    conn.close()
    
    if not payments:
        text = "üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø—É—Å—Ç–∞"
    else:
        text = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–ª–∞—Ç–µ–∂–µ–π:\n\n"
        for amount, status, date in payments:
            status_icon = "‚úÖ" if status == "completed" else "‚åõ"
            text += f"{status_icon} {amount}‚ÇΩ - {date}\n"
    
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚ùÆ –ù–∞–∑–∞–¥", callback_data="balance_menu"))
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text,
        reply_markup=markup
    )






def create_payment_direct(amount, user_id):
    url = "https://api.memepay.io/v1/payments"
    headers = {
        "Authorization": f"Bearer {MEMEPAY_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "amount": amount,
        "shop_id": MEMEPAY_SHOP_ID,
        "currency": "RUB",
        "metadata": {"user_id": user_id}
    }
    
    try:
        response = requests.post(url, json=data, headers=headers, timeout=10)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text if hasattr(e, 'response') else '–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞'}")
        raise

def create_yoomoney_payment(user_id, amount):
    import uuid
    payment_id = str(uuid.uuid4())
    save_payment_to_db(user_id, payment_id, amount)  # –≤ —Ç–≤–æ–µ–π –ë–î —É–∂–µ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è

    params = {
        "receiver": YOOMONEY_RECEIVER,
        "quickpay-form": "shop",
        "targets": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {user_id}",
        "paymentType": "AC",   # AC = –∫–∞—Ä—Ç–∞, PC = –∫–æ—à–µ–ª—ë–∫
        "sum": amount,
        "label": payment_id,
    }
    url = "https://yoomoney.ru/quickpay/confirm.xml?" + urlencode(params)
    return payment_id, url



@bot.callback_query_handler(func=lambda call: call.data.startswith("create_payment_select_"))
def handle_payment_creation(call):
    user_id = call.from_user.id
    amount = int(call.data.split("_")[-1])

    payment_id = str(uuid.uuid4())
    save_payment_to_db(user_id, payment_id, amount)

    # YooMoney —Å—Å—ã–ª–∫–∞
    params = {
        "receiver": YOOMONEY_RECEIVER,
        "quickpay-form": "shop",
        "targets": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {user_id}",
        "paymentType": "AC",
        "sum": amount,
        "label": payment_id,
    }
    url = "https://yoomoney.ru/quickpay/confirm.xml?" + urlencode(params)

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=url))
    markup.add(InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{payment_id}"))
    markup.add(InlineKeyboardButton("‚ùÆ –ù–∞–∑–∞–¥", callback_data="balance_menu"))

    current_time = datetime.now().strftime("%H:%M:%S")
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"üí∞ –°—É–º–º–∞: {amount}‚ÇΩ\n‚è∞ –°–æ–∑–¥–∞–Ω–æ: {current_time}\n\n" +
             "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª.\n" +
             "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 2 —á–∞—Å–∞",
        reply_markup=markup
    )




@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    if call.data == "user_info":
        try:
            user = call.from_user
            full_name = f"{user.first_name} {user.last_name}" if user.last_name else user.first_name
            sub_info = get_subscription_info(user.id)
            total_records = get_manual_stats_count()
            current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            
            message_text = (
                f"üÜî –í–∞—à ID: {user.id}\n"
                f"üë§ –ò–º—è: {full_name}\n"
                f"üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}\n"
                f"‚è≥ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {sub_info['status']}\n"
                f"üìÖ {sub_info['expiry_info']}\n\n"
                f"üõ† –¢–µ—Ö-–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @Fenix_Support_BBot\n"
                f"üõ† –ù–∞—à —Å–∞–π—Ç: FENIX-OSINT.SITE\n"
            )
                
            markup = InlineKeyboardMarkup()
            markup.row(
                InlineKeyboardButton("‚ùÆ –ù–∞–∑–∞–¥", callback_data="main_menu"),
                InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–µ–±—è", url="https://fenix-osint.site/removal.html"),
                InlineKeyboardButton("–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", url="https://fenix-osint.site/base.html")   
            )
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=message_text,
                reply_markup=markup
            )
            bot.answer_callback_query(call.id)
        except Exception as e:
            print(f"Error in user_info: {e}")
            bot.answer_callback_query(
                call.id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                show_alert=True
            )
    elif call.data == "main_menu":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        go_main_menu(call)

def get_manual_stats_count():
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ä—É—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        ensure_stats_table_exists()  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
        conn = sqlite3.connect('stats.db')
        c = conn.cursor()
        c.execute("SELECT SUM(record_count) FROM stats")
        total = c.fetchone()[0] or 0
        conn.close()
        return total
    except Exception as e:
        print(f"Error getting manual stats: {e}")
        return 0



def get_subscription_info(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = sqlite3.connect('subscriptions_service/subs.db')
        cursor = conn.cursor()
        cursor.execute(
            "SELECT expires_at FROM subscriptions WHERE user_id = ?",
            (user_id,)
        )
        result = cursor.fetchone()
        conn.close()
        
        if result:
            expires_at = result[0]
            current_time = time.time()
            if current_time < expires_at:
                remaining = expires_at - current_time
                days = int(remaining // 86400)
                hours = int((remaining % 86400) // 3600)
                minutes = int((remaining % 3600) // 60)
                return {
                    'status': "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞",
                    'expiry_info': f"–û—Å—Ç–∞–ª–æ—Å—å: {days} –¥–Ω. {hours} —á–∞—Å. {minutes} –º–∏–Ω."
                }
            else:
                return {
                    'status': "‚ùå –ò—Å—Ç–µ–∫–ª–∞",
                    'expiry_info': "–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞"
                }
        
        return {
            'status': "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞",
            'expiry_info': "–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
        return {
            'status': "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏",
            'expiry_info': "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"
        }

def get_total_records_count():
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤–æ –≤—Å–µ—Ö –±–∞–∑–∞—Ö"""
    total = 0
    for folder in os.listdir(BASE_DIR):
        db_path = os.path.join(BASE_DIR, folder, 'base.db')
        if os.path.exists(db_path):
            try:
                conn = sqlite3.connect(db_path)
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM people")
                count = cursor.fetchone()[0]
                total += count
                conn.close()
            except:
                continue
    return total




@bot.callback_query_handler(func=lambda call: call.data == "admin_stats_menu")
def admin_stats_menu(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="edit_stats"))
    markup.add(InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="show_stats"))
    markup.add(InlineKeyboardButton("‚ùÆ –ù–∞–∑–∞–¥", callback_data="main_menu"))

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="üìä –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π:",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "edit_stats")
def edit_stats(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    msg = bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã:–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`\n\n"
        "–ü—Ä–∏–º–µ—Ä: `–†–æ—Å—Å–∏—è:1500000`"
    )
    bot.register_next_step_handler(msg, process_stats_update)

def process_stats_update(message):
    try:
        ensure_stats_table_exists()
        base_name, count = message.text.split(':')
        count = int(count.strip())
        base_name = base_name.strip()
        
        conn = sqlite3.connect('stats.db')
        c = conn.cursor()
        c.execute(
            "INSERT OR REPLACE INTO stats (base_name, record_count) VALUES (?, ?)",
            (base_name, count)
        )
        conn.commit()
        conn.close()
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –±–∞–∑—ã '{base_name}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {count:,} –∑–∞–ø–∏—Å–µ–π"
        )
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚ùå –û—à–∏–±–∫–∞: {e}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã:–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
        )

@bot.callback_query_handler(func=lambda call: call.data == "show_stats")
def show_stats(call):
    ensure_stats_table_exists()
    conn = sqlite3.connect('stats.db')
    c = conn.cursor()
    c.execute("SELECT base_name, record_count FROM stats ORDER BY base_name")
    stats = c.fetchall()
    conn.close()
    
    if not stats:
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∞–∑–∞–º:\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    else:
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∞–∑–∞–º:\n\n"
        total = 0
        for base_name, count in stats:
            text += f"‚ñ™ {base_name}: {count:,}\n"
            total += count
        text += f"\nüìå –í—Å–µ–≥–æ: {total:,} –∑–∞–ø–∏—Å–µ–π"
    
    markup = InlineKeyboardMarkup()
    if is_admin(call.from_user.id):
        markup.add(InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_stats"))
    markup.add(InlineKeyboardButton("‚ùÆ –ù–∞–∑–∞–¥", callback_data="main_menu"))
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text,
        reply_markup=markup
    )



@bot.message_handler(commands=['statistic'])
def send_statistic(message):  # –ó–¥–µ—Å—å message - –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ—É–Ω–∫—Ü–∏–∏
    try:
        user = message.from_user
        full_name = f"{user.first_name} {user.last_name}" if user.last_name else user.first_name
        sub_info = get_subscription_info(user.id)
        total_records = get_manual_stats_count()
        current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        
        message_text = (
                f"üÜî –í–∞—à ID: {user.id}\n"
                f"üë§ –ò–º—è: {full_name}\n"
                f"üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}\n"
                f"‚è≥ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {sub_info['status']}\n"
                f"üìÖ {sub_info['expiry_info']}\n\n"
                f"üõ† –¢–µ—Ö-–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @Fenix_Support_BBot\n"
                f"üõ† –ù–∞—à —Å–∞–π—Ç: FENIX-OSINT.SITE\n"
            )
        
        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("‚ùÆ –ù–∞–∑–∞–¥", callback_data="main_menu"),
            InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–µ–±—è", url="https://fenix-osint.site"),
            InlineKeyboardButton("–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", url="https://fenix-osint.site/base.html")   
        )
        
        bot.send_message(
            chat_id=message.chat.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º message.chat.id
            text=message_text,
            reply_markup=markup
        )
    except Exception as e:
        print(f"Error in /statistic command: {e}")
        bot.send_message(
            chat_id=message.chat.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        )



user_messages = {}

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.from_user.id not in user_messages:
        user_messages[message.from_user.id] = []
    user_messages[message.from_user.id].append(message.message_id)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text.startswith('/'):
        bot.process_new_messages([message])
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É (—á—Ç–æ–±—ã —É—Å–ø–µ—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å)
    threading.Timer(1.0, delete_user_message, args=[message]).start()

def delete_user_message(message):
    try:
        bot.delete_message(message.chat.id, message.message_id)
        # –£–¥–∞–ª—è–µ–º –∏–∑ –Ω–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞
        if message.from_user.id in user_messages and message.message_id in user_messages[message.from_user.id]:
            user_messages[message.from_user.id].remove(message.message_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

def cleanup_user_messages(user_id, chat_id):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in user_messages:
        for msg_id in user_messages[user_id][:]:  # –î–µ–ª–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞
            try:
                bot.delete_message(chat_id, msg_id)
                user_messages[user_id].remove(msg_id)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
 

def get_balance(user_id: int) -> int:
    """–õ–æ–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ —Ñ–∞–π–ª–µ balance_service/balance.db"""
    try:
        os.makedirs('balance_service', exist_ok=True)
        conn = sqlite3.connect('balance_service/balance.db')
        c = conn.cursor()
        c.execute('''
            CREATE TABLE IF NOT EXISTS balances (
                user_id INTEGER PRIMARY KEY,
                balance INTEGER NOT NULL DEFAULT 0
            )
        ''')
        # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å
        c.execute('INSERT OR IGNORE INTO balances (user_id, balance) VALUES (?, 0)', (user_id,))
        c.execute('SELECT balance FROM balances WHERE user_id = ?', (user_id,))
        row = c.fetchone()
        return int(row[0]) if row else 0
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞]: {e}")
        return 0
    finally:
        try:
            conn.close()
        except:
            pass




@bot.message_handler(commands=["addbalance"])
def cmd_addbalance(message):
    try:
        parts = message.text.split()
        if len(parts) != 3:
            bot.send_message(message.chat.id, "‚ùå –§–æ—Ä–º–∞—Ç: /addbalance <user_id> <—Å—É–º–º–∞>")
            return

        _, uid, amt = parts
        uid, amt = int(uid), int(amt)

        if add_balance(uid, amt):
            new_balance = get_balance(uid)

            # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            bot.send_message(
                message.chat.id,
                f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ {amt}‚ÇΩ\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}‚ÇΩ"
            )

            # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data="hide_msg"))
                bot.send_message(
                    uid,
                    f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ —Å—É–º–º—É - {amt}‚ÇΩ\n"
                    f"üí≥ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å - {new_balance}‚ÇΩ",
                    reply_markup=markup
                )
            except:
                bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            admin_info = f"{message.from_user.first_name} {message.from_user.last_name or ''}"
            balance_log = (
                f"üí∞ –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê (–∫–æ–º–∞–Ω–¥–∞)\n"
                f"üëë –ê–¥–º–∏–Ω: {admin_info}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {uid}\n"
                f"üíµ –°—É–º–º–∞: {amt}‚ÇΩ\n"
                f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}‚ÇΩ"
            )
            send_log_message(balance_log)

        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")




def check_old_payments():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ä—ã–µ pending –ø–ª–∞—Ç–µ–∂–∏ –∏ –ø–æ–º–µ—á–∞–µ—Ç –∏—Ö –∫–∞–∫ expired"""
    try:
        conn = sqlite3.connect('balance_service/balance.db')
        cursor = conn.cursor()
        
        # –ü–æ–º–µ—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ —Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤ –∫–∞–∫ expired
        cursor.execute('''
            UPDATE payments 
            SET status = 'expired' 
            WHERE status = 'pending' 
            AND datetime(created_at) < datetime('now', '-2 hours')
        ''')
        
        expired_count = cursor.rowcount
        if expired_count > 0:
            print(f"üìã –ü–æ–º–µ—á–µ–Ω–æ {expired_count} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
        
        conn.commit()
        conn.close()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {e}")

def schedule_payment_checker():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π"""
    schedule.every(30).minutes.do(check_old_payments)
    
    while True:
        schedule.run_pending()
        time.sleep(60)

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
payment_checker_thread = threading.Thread(target=schedule_payment_checker, daemon=True)
payment_checker_thread.start()

def sync_balance_with_site(user_id, amount):
    try:
        url = "https://fenix-osint.site/update_balance.php"
        data = {
            "user_id": user_id,
            "amount": amount
        }
        r = requests.post(url, data=data, timeout=10)
        print("üì° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–∞–π—Ç–æ–º:", r.text)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–∞–π—Ç–æ–º:", e)


def add_subscription(user_id, days):
    conn = sqlite3.connect('database.db')
    c = conn.cursor()

    c.execute("INSERT OR REPLACE INTO subscriptions (user_id, expires_at) VALUES (?, ?)", (user_id,))
    row = c.fetchone()

    now = datetime.now()
    if row and row[0]:  
        current_end = datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S")
        if current_end > now:
            # –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äì –ø—Ä–∏–±–∞–≤–ª—è–µ–º
            new_end = current_end + timedelta(days=days)
        else:
            # –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å ‚Äì –Ω–∞—á–∏–Ω–∞–µ–º —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
            new_end = now + timedelta(days=days)
    else:
        # –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–æ–æ–±—â–µ –Ω–µ –±—ã–ª–æ
        new_end = now + timedelta(days=days)

    c.execute("UPDATE users SET subscription_end = ? WHERE user_id = ?", (new_end.strftime("%Y-%m-%d %H:%M:%S"), user_id))
    conn.commit()
    conn.close()

@bot.callback_query_handler(func=lambda call: call.data.startswith("hide_notification_"))
def hide_notification(call):
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")

def ensure_stats_table_exists():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É stats, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    try:
        conn = sqlite3.connect('stats.db')
        c = conn.cursor()
        c.execute('''
            CREATE TABLE IF NOT EXISTS stats (
                base_name TEXT PRIMARY KEY,
                record_count INTEGER
            )
        ''')
        conn.commit()
        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã stats: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("hide_notification"))
def hide_notification(call):
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id, "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        try:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        except:
            pass
    
@bot.callback_query_handler(func=lambda call: call.data == "hide_msg")
def hide_message(call):
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")

SUBS_DB_PATH = os.path.join('subscriptions_service', 'subs.db')

def get_subs_conn():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –ø–æ–¥–ø–∏—Å–æ–∫ —Å –ª–æ–≥–æ–º"""
    os.makedirs('subscriptions_service', exist_ok=True)
    conn = sqlite3.connect(SUBS_DB_PATH)
    return conn

def init_subscription_db():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É –ø–æ–¥–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    conn = get_subs_conn()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS subscriptions (
            user_id INTEGER PRIMARY KEY,
            expires_at INTEGER NOT NULL
        )
    ''')
    conn.commit()
    conn.close()
    print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞ –≤ {SUBS_DB_PATH}")

def is_subscribed(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞"""
    try:
        init_subscription_db()
        conn = get_subs_conn()
        cursor = conn.cursor()
        cursor.execute("SELECT expires_at FROM subscriptions WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        conn.close()
        if result:
            return time.time() < result[0]
        return False
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏]: {e}")
        return False

def add_subscription(user_id: int, duration_seconds: int) -> bool:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ / –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        init_subscription_db()
        conn = get_subs_conn()
        cursor = conn.cursor()
        expires_at = int(time.time()) + duration_seconds
        cursor.execute('''
            INSERT OR REPLACE INTO subscriptions (user_id, expires_at)
            VALUES (?, ?)
        ''', (user_id, expires_at))
        conn.commit()
        conn.close()
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {user_id} –¥–æ {datetime.fromtimestamp(expires_at)}")
        return True
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏]: {e}")
        return False

def send_log_message(text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –ª–æ–≥–æ–≤"""
    try:
        bot.send_message(LOG_GROUP_ID, text)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞: {e}")


if __name__ == "__main__":
    main_menu()
    init_databases()   